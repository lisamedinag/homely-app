{"ast":null,"code":"var _jsxFileName = \"/home/lmedina/Documents/Ironhack/Week9/h-app-reloaded/src/components/tasks/FormEditTask.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { createTask, editTask } from \"../../actions\";\nimport { Field, reduxForm } from 'redux-form';\nimport { withAuth0 } from '@auth0/auth0-react';\nimport Loading from \"../utils/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FormEditTask extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.renderInput = _ref => {\n      let {\n        input,\n        label,\n        meta,\n        placeholder\n      } = _ref;\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: className,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...input,\n          autoComplete: \"off\",\n          placeholder: placeholder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this), this.renderError(meta)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.onSubmit = formValues => {\n      this.props.editTask({\n        form: formValues,\n        taskId: this.props.selectedTask._id\n      });\n    };\n  }\n\n  renderError(_ref2) {\n    let {\n      error,\n      touched\n    } = _ref2;\n\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui error message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    if (this.props.selectedTask === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (this.props.selectedTask.status === 'COMPLETED') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"You cant edit a completed task :(\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Create the Task - \", this.props.selectedTask.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: \"name\",\n          component: this.renderInput,\n          label: \"Enter Name\",\n          placeholder: this.props.selectedTask.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"points\",\n          component: this.renderInput,\n          label: \"Enter points\",\n          placeholder: this.props.selectedTask.points\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"description\",\n          component: this.renderInput,\n          label: \"Enter description\",\n          placeholder: this.props.selectedTask.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ui button primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.name) {\n    errors.name = 'You must enter a name';\n  }\n\n  if (!formValues.points) {\n    errors.name = 'You must enter the amount of points';\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = state => {\n  return {\n    selectedTask: state.selectedTask\n  };\n};\n\nconst authWrapped = withAuth0(FormEditTask);\nconst formWrapped = reduxForm({\n  form: 'taskEditForm',\n  validate\n})(authWrapped);\nexport default connect(mapStateToProps, {\n  editTask\n})(formWrapped);","map":{"version":3,"sources":["/home/lmedina/Documents/Ironhack/Week9/h-app-reloaded/src/components/tasks/FormEditTask.js"],"names":["React","connect","createTask","editTask","Field","reduxForm","withAuth0","Loading","FormEditTask","Component","renderInput","input","label","meta","placeholder","className","error","touched","renderError","onSubmit","formValues","props","form","taskId","selectedTask","_id","render","status","name","handleSubmit","points","description","validate","errors","mapStateToProps","state","authWrapped","formWrapped"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\nimport {createTask, editTask} from \"../../actions\";\nimport {Field, reduxForm} from 'redux-form';\nimport {withAuth0} from '@auth0/auth0-react';\nimport Loading from \"../utils/Loading\";\n\n\n\nclass FormEditTask extends React.Component {\n    renderError({error, touched}) {\n        if (touched && error) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({input, label, meta, placeholder}) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n        return (\n            <div className={className}>\n                <label>{label}</label>\n                <input {...input} autoComplete=\"off\" placeholder={placeholder}/>\n                {this.renderError(meta)}\n            </div>\n        );\n    };\n\n\n\n\n    onSubmit = formValues => {\n\n        this.props.editTask({\n            form: formValues,\n            taskId: this.props.selectedTask._id\n        })\n    };\n\n    render() {\n        if (this.props.selectedTask === null) {\n            return <div><Loading/></div>\n        }\n\n        if (this.props.selectedTask.status === 'COMPLETED') {\n            return <div>You cant edit a completed task :(</div>\n        }\n\n        return (\n            <div>\n                <h1>Create the Task - {this.props.selectedTask.name}</h1>\n                <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n\n                    <Field name=\"name\" component={this.renderInput} label=\"Enter Name\" placeholder={this.props.selectedTask.name}/>\n                    <Field name=\"points\" component={this.renderInput} label=\"Enter points\" placeholder={this.props.selectedTask.points}/>\n                    <Field name=\"description\" component={this.renderInput} label=\"Enter description\" placeholder={this.props.selectedTask.description}/>\n\n\n\n\n                    <button className=\"ui button primary\">Submit</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst validate = formValues => {\n    const errors = {};\n\n    if (!formValues.name) {\n        errors.name = 'You must enter a name';\n    }\n\n    if (!formValues.points) {\n        errors.name = 'You must enter the amount of points';\n    }\n\n\n    return errors;\n};\n\n\nconst mapStateToProps = state => {\n    return {\n        selectedTask: state.selectedTask,\n    };\n};\n\nconst authWrapped = withAuth0(FormEditTask)\n\nconst formWrapped = reduxForm(\n    {form: 'taskEditForm', validate}\n)(authWrapped);\n\nexport default connect(mapStateToProps, {editTask})(formWrapped)\n"]},"metadata":{},"sourceType":"module"}