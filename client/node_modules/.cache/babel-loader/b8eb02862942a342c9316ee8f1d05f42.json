{"ast":null,"code":"import userService from \"../services/userService\";\nimport homeService from \"../services/homeService\";\nimport tasksService from \"../services/taskService\";\nimport rewardService from \"../services/rewardService\";\nimport pointService from \"../services/pointService\";\nimport history from \"../history\";\nimport { FETCH_HOMES, FETCH_USERS, FETCH_TASKS, FETCH_REWARDS, CREATE_HOME, FETCH_POINTS, FETCH_POINTS_LIST, SELECTED_HOME, SELECTED_USER, SELECTED_TASK, CREATE_TASK, SELECTED_REWARD, CREATE_REWARD, ASSIGN_TASK, EDIT_REWARD, EDIT_TASK } from \"./types\";\nexport const fetchHomes = () => async dispatch => {\n  const response = await homeService.get('/allHomes');\n  dispatch({\n    type: FETCH_HOMES,\n    payload: response.data\n  });\n};\nexport const fetchPopulatedHomes = () => async dispatch => {\n  const response = await homeService.get('/populatedHomes');\n  dispatch({\n    type: FETCH_HOMES,\n    payload: response.data\n  });\n};\nexport const createHome = formValues => async dispatch => {\n  const userId = formValues.user;\n  const homeToCreate = {\n    name: formValues.form.name,\n    owner: userId,\n    usersArr: [userId]\n  };\n  const response = await homeService.post('/newHome', homeToCreate);\n  dispatch({\n    type: CREATE_HOME,\n    payload: response.data\n  });\n  history.goBack();\n};\nexport const editHome = (newName, homeId) => async dispatch => {\n  const homeToCreate = {\n    name: newName\n  };\n  const response = await homeService.put('/edithome/' + homeId, homeToCreate);\n  dispatch({\n    type: CREATE_HOME,\n    payload: response.data\n  });\n  history.goBack();\n};\nexport const fetchUsers = () => async dispatch => {\n  const response = await userService.get('/allUsers');\n  dispatch({\n    type: FETCH_USERS,\n    payload: response.data\n  });\n};\nexport const fetchTasks = () => async dispatch => {\n  const response = await tasksService.get('/allTasks');\n  dispatch({\n    type: FETCH_TASKS,\n    payload: response.data\n  });\n};\nexport const fetchRewards = () => async dispatch => {\n  const response = await rewardService.get('/allRewards');\n  dispatch({\n    type: FETCH_REWARDS,\n    payload: response.data\n  });\n};\nexport const fetchPointsList = () => async dispatch => {\n  const response = await pointService.get('/allPoints');\n  dispatch({\n    type: FETCH_POINTS_LIST,\n    payload: response.data\n  });\n};\nexport const fetchPointsByUserAndHome = (userId, homeId) => async dispatch => {\n  const response = await pointService.get(`/user/${userId}/home/${homeId}`);\n  dispatch({\n    type: FETCH_POINTS,\n    payload: response.data\n  });\n};\nexport const selectHome = home => {\n  return {\n    type: SELECTED_HOME,\n    payload: home\n  };\n};\nexport const selectUser = user => {\n  return {\n    type: SELECTED_USER,\n    payload: user\n  };\n};\nexport const selectTask = task => {\n  return {\n    type: SELECTED_TASK,\n    payload: task\n  };\n};\nexport const createTask = formValues => async dispatch => {\n  const userId = formValues.user;\n  const status = formValues.form.assignedUser !== '' ? 'ASSIGNED' : 'AVAILABLE';\n  const taskToCreate = {\n    name: formValues.form.name,\n    points: parseInt(formValues.form.points),\n    description: formValues.form.description,\n    status: status,\n    assignedUser: formValues.form.assignedUser,\n    home: formValues.home\n  };\n  const response = await tasksService.post('/newTask', taskToCreate);\n  dispatch({\n    type: CREATE_TASK,\n    payload: response.data\n  });\n  history.goBack();\n};\nexport const editTask = formValues => async dispatch => {\n  const taskId = formValues.taskId;\n  const editedTask = {\n    name: formValues.form.name,\n    points: parseInt(formValues.form.points),\n    description: formValues.form.description\n  };\n  const response = await tasksService.put('/editTask/' + taskId, editedTask);\n  dispatch({\n    type: EDIT_TASK,\n    payload: response.data\n  });\n  history.go(-2);\n};\nexport const updateStatusAndUserAssignedTask = (taskId, status, userId) => async dispatch => {\n  const taskToAssign = {\n    status: status,\n    assignedUser: userId\n  };\n  console.log(taskToAssign);\n  const response = await tasksService.put('/editTask/' + taskId, taskToAssign);\n  dispatch({\n    type: ASSIGN_TASK,\n    payload: response.data\n  });\n  history.goBack();\n};\nexport const selectReward = task => {\n  return {\n    type: SELECTED_REWARD,\n    payload: task\n  };\n};\nexport const createReward = formValues => async dispatch => {\n  const userId = formValues.user;\n  const rewardToCreate = {\n    name: formValues.form.name,\n    pointsWorth: parseInt(formValues.form.pointsWorth),\n    description: formValues.form.description,\n    status: 'AVAILABLE',\n    claimedByUser: '',\n    home: formValues.home\n  };\n  console.log(rewardToCreate, \"from action\");\n  const response = await rewardService.post('/newReward', rewardToCreate);\n  dispatch({\n    type: CREATE_REWARD,\n    payload: response.data\n  });\n  history.goBack();\n};\nexport const editReward = formValues => async dispatch => {\n  const rewardId = formValues.rewardId;\n  const editedReward = {\n    name: formValues.form.name,\n    pointsWorth: parseInt(formValues.form.pointsWorth),\n    description: formValues.form.description\n  };\n  console.log(editedReward, \"from action\");\n  const response = await rewardService.put('/editReward/' + rewardId, editedReward);\n  dispatch({\n    type: EDIT_REWARD,\n    payload: response.data\n  });\n  history.go(-2);\n};\nexport const updateStatusAndUserAssignedReward = (rewardId, status, userId) => async dispatch => {\n  const rewardToAssign = {\n    status: status,\n    claimedByUser: userId\n  };\n  console.log(rewardToAssign);\n  const response = await rewardService.put('/editReward/' + rewardId, rewardToAssign);\n  dispatch({\n    type: ASSIGN_TASK,\n    payload: response.data\n  });\n  history.goBack();\n};","map":{"version":3,"sources":["/home/lmedina/Documents/Ironhack/Week9/h-app-reloaded/src/actions/index.js"],"names":["userService","homeService","tasksService","rewardService","pointService","history","FETCH_HOMES","FETCH_USERS","FETCH_TASKS","FETCH_REWARDS","CREATE_HOME","FETCH_POINTS","FETCH_POINTS_LIST","SELECTED_HOME","SELECTED_USER","SELECTED_TASK","CREATE_TASK","SELECTED_REWARD","CREATE_REWARD","ASSIGN_TASK","EDIT_REWARD","EDIT_TASK","fetchHomes","dispatch","response","get","type","payload","data","fetchPopulatedHomes","createHome","formValues","userId","user","homeToCreate","name","form","owner","usersArr","post","goBack","editHome","newName","homeId","put","fetchUsers","fetchTasks","fetchRewards","fetchPointsList","fetchPointsByUserAndHome","selectHome","home","selectUser","selectTask","task","createTask","status","assignedUser","taskToCreate","points","parseInt","description","editTask","taskId","editedTask","go","updateStatusAndUserAssignedTask","taskToAssign","console","log","selectReward","createReward","rewardToCreate","pointsWorth","claimedByUser","editReward","rewardId","editedReward","updateStatusAndUserAssignedReward","rewardToAssign"],"mappings":"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","sourcesContent":["import userService from \"../services/userService\";\nimport homeService from \"../services/homeService\";\nimport tasksService from \"../services/taskService\";\nimport rewardService from \"../services/rewardService\";\nimport pointService from \"../services/pointService\";\nimport history from \"../history\";\n\nimport {\n    FETCH_HOMES,\n    FETCH_USERS,\n    FETCH_TASKS,\n    FETCH_REWARDS,\n    CREATE_HOME,\n    FETCH_POINTS,\n    FETCH_POINTS_LIST,\n    SELECTED_HOME,\n    SELECTED_USER,\n    SELECTED_TASK,\n    CREATE_TASK,\n    SELECTED_REWARD,\n    CREATE_REWARD, ASSIGN_TASK, EDIT_REWARD, EDIT_TASK,\n} from \"./types\";\n\n\n\nexport const fetchHomes = () => async dispatch => {\n    const response = await homeService.get('/allHomes');\n\n    dispatch({type: FETCH_HOMES, payload: response.data});\n};\n\nexport const fetchPopulatedHomes = () => async dispatch => {\n    const response = await homeService.get('/populatedHomes');\n    dispatch({ type: FETCH_HOMES, payload: response.data });\n};\n\nexport const createHome = formValues => async (dispatch) => {\n    const userId = formValues.user;\n    const homeToCreate = {\n        name: formValues.form.name,\n        owner: userId,\n        usersArr: [userId]\n    }\n    const response = await homeService.post('/newHome', homeToCreate);\n    dispatch({type: CREATE_HOME, payload: response.data});\n    history.goBack();\n};\n\n\nexport const editHome = (newName, homeId) => async (dispatch) => {\n\n    const homeToCreate = {\n        name: newName\n    }\n    const response = await homeService.put('/edithome/' + homeId, homeToCreate);\n    dispatch({type: CREATE_HOME, payload: response.data});\n    history.goBack();\n};\n\nexport const fetchUsers = () => async dispatch => {\n    const response = await userService.get('/allUsers');\n\n    dispatch({ type: FETCH_USERS, payload: response.data });\n};\n\nexport const fetchTasks = () => async dispatch => {\n    const response = await tasksService.get('/allTasks');\n\n    dispatch({ type: FETCH_TASKS, payload: response.data });\n};\n\nexport const fetchRewards = () => async dispatch => {\n    const response = await rewardService.get('/allRewards');\n\n    dispatch({ type: FETCH_REWARDS, payload: response.data });\n};\n\nexport const fetchPointsList = () => async dispatch => {\n    const response = await pointService.get('/allPoints');\n\n    dispatch({ type: FETCH_POINTS_LIST, payload: response.data });\n};\n\nexport const fetchPointsByUserAndHome = (userId, homeId) => async dispatch => {\n    const response = await pointService.get(`/user/${userId}/home/${homeId}`);\n\n    dispatch({ type: FETCH_POINTS, payload: response.data });\n}\n\nexport const selectHome = (home) => {\n    return {\n        type: SELECTED_HOME,\n        payload: home\n    };\n};\n\nexport const selectUser = (user) => {\n    return {\n        type: SELECTED_USER,\n        payload: user\n    };\n};\n\nexport const selectTask = (task) => {\n    return {\n        type: SELECTED_TASK,\n        payload: task\n    };\n};\n\nexport const createTask = formValues => async (dispatch) => {\n\n    const userId = formValues.user;\n    const status = formValues.form.assignedUser !== '' ? 'ASSIGNED' : 'AVAILABLE';\n    const taskToCreate = {\n        name: formValues.form.name,\n        points: parseInt(formValues.form.points),\n        description: formValues.form.description,\n        status: status,\n        assignedUser: formValues.form.assignedUser,\n        home: formValues.home\n    }\n\n    const response = await tasksService.post('/newTask', taskToCreate);\n    dispatch({type: CREATE_TASK, payload: response.data});\n    history.goBack();\n};\n\n\nexport const editTask = formValues => async (dispatch) => {\n\n    const taskId = formValues.taskId;\n    const editedTask = {\n        name: formValues.form.name,\n        points: parseInt(formValues.form.points),\n        description: formValues.form.description,\n    }\n\n    const response = await tasksService.put('/editTask/' + taskId, editedTask);\n    dispatch({type: EDIT_TASK, payload: response.data});\n    history.go(-2);\n};\nexport const updateStatusAndUserAssignedTask = (taskId, status, userId,) => async (dispatch) => {\n\n\n    const taskToAssign = {\n        status: status,\n        assignedUser: userId,\n    }\n    console.log(taskToAssign)\n\n    const response = await tasksService.put('/editTask/' + taskId, taskToAssign);\n    dispatch({type: ASSIGN_TASK, payload: response.data});\n    history.goBack();\n};\n\n\n\n\n\nexport const selectReward = (task) => {\n    return {\n        type: SELECTED_REWARD,\n        payload: task\n    };\n};\n\n\nexport const createReward = formValues => async (dispatch) => {\n    const userId = formValues.user;\n    const rewardToCreate = {\n        name: formValues.form.name,\n        pointsWorth: parseInt(formValues.form.pointsWorth),\n        description: formValues.form.description,\n        status: 'AVAILABLE',\n        claimedByUser: '',\n        home: formValues.home\n    }\n    console.log(rewardToCreate, \"from action\");\n\n    const response = await rewardService.post('/newReward', rewardToCreate);\n    dispatch({type: CREATE_REWARD, payload: response.data});\n    history.goBack();\n};\n\nexport const editReward = formValues => async (dispatch) => {\n    const rewardId = formValues.rewardId;\n    const editedReward = {\n        name: formValues.form.name,\n        pointsWorth: parseInt(formValues.form.pointsWorth),\n        description: formValues.form.description,\n    }\n    console.log(editedReward, \"from action\");\n\n    const response = await rewardService.put('/editReward/' + rewardId, editedReward);\n    dispatch({type: EDIT_REWARD, payload: response.data});\n    history.go(-2);\n};\n\nexport const updateStatusAndUserAssignedReward = (rewardId, status, userId,) => async (dispatch) => {\n\n\n    const rewardToAssign = {\n        status: status,\n        claimedByUser: userId,\n    }\n    console.log(rewardToAssign)\n\n    const response = await rewardService.put('/editReward/' + rewardId, rewardToAssign);\n    dispatch({type: ASSIGN_TASK, payload: response.data});\n    history.goBack();\n};\n"]},"metadata":{},"sourceType":"module"}