{"ast":null,"code":"import userService from \"../services/userService\";\nimport homeService from \"../services/homeService\";\nimport tasksService from \"../services/taskService\";\nimport rewardService from \"../services/rewardService\";\nimport pointService from \"../services/pointService\";\nimport { FETCH_HOMES, FETCH_USERS, FETCH_TASKS, FETCH_REWARDS, CREATE_HOME, FETCH_POINTS, FETCH_POINTS_LIST, SELECTED_HOME, SELECTED_USER, SELECTED_TASK, CREATE_TASK, SELECTED_REWARD, CREATE_REWARD } from \"./types\";\nexport const fetchHomes = () => async dispatch => {\n  const response = await homeService.get('/allHomes');\n  dispatch({\n    type: FETCH_HOMES,\n    payload: response.data\n  });\n};\nexport const fetchPopulatedHomes = () => async dispatch => {\n  const response = await homeService.get('/populatedHomes');\n  dispatch({\n    type: FETCH_HOMES,\n    payload: response.data\n  });\n};\nexport const createHome = formValues => async dispatch => {\n  const userId = formValues.user;\n  const homeToCreate = {\n    name: formValues.form.name,\n    owner: userId,\n    usersArr: [userId]\n  };\n  const response = await homeService.post('/newHome', homeToCreate);\n  dispatch({\n    type: CREATE_HOME,\n    payload: response.data\n  }); // history.push('/');\n};\nexport const fetchUsers = () => async dispatch => {\n  const response = await userService.get('/allUsers');\n  dispatch({\n    type: FETCH_USERS,\n    payload: response.data\n  });\n};\nexport const fetchTasks = () => async dispatch => {\n  const response = await tasksService.get('/allTasks');\n  dispatch({\n    type: FETCH_TASKS,\n    payload: response.data\n  });\n};\nexport const fetchRewards = () => async dispatch => {\n  const response = await rewardService.get('/allRewards');\n  dispatch({\n    type: FETCH_REWARDS,\n    payload: response.data\n  });\n};\nexport const fetchPointsList = () => async dispatch => {\n  const response = await pointService.get('/allPoints');\n  dispatch({\n    type: FETCH_POINTS_LIST,\n    payload: response.data\n  });\n};\nexport const fetchPointsByUserAndHome = (userId, homeId) => async dispatch => {\n  const response = await pointService.get(`/user/${userId}/home/${homeId}`);\n  dispatch({\n    type: FETCH_POINTS,\n    payload: response.data\n  });\n};\nexport const selectHome = home => {\n  return {\n    type: SELECTED_HOME,\n    payload: home\n  };\n};\nexport const selectUser = user => {\n  return {\n    type: SELECTED_USER,\n    payload: user\n  };\n};\nexport const selectTask = task => {\n  return {\n    type: SELECTED_TASK,\n    payload: task\n  };\n};\nexport const createTask = formValues => async dispatch => {\n  const userId = formValues.user;\n  const taskToCreate = {\n    name: formValues.form.name,\n    points: parseInt(formValues.form.points),\n    description: formValues.form.description,\n    isFinished: false,\n    assignedUser: userId,\n    home: formValues.home\n  };\n  const response = await tasksService.post('/newTask', taskToCreate);\n  dispatch({\n    type: CREATE_TASK,\n    payload: response.data\n  }); // history.push('/');\n};\nexport const selectReward = task => {\n  return {\n    type: SELECTED_REWARD,\n    payload: task\n  };\n};\nexport const createReward = formValues => async dispatch => {\n  const userId = formValues.user;\n  const rewardToCreate = {\n    name: formValues.form.name,\n    pointsWorth: parseInt(formValues.form.pointsWorth),\n    description: formValues.form.description,\n    // isClaimed: false,\n    // assignedUser: [],\n    home: formValues.home\n  };\n  console.log(rewardToCreate, \"from action\");\n  const response = await rewardService.post('/newReward', rewardToCreate);\n  dispatch({\n    type: CREATE_REWARD,\n    payload: response.data\n  }); // history.push('/');\n};","map":{"version":3,"sources":["/home/lmedina/Documents/Ironhack/Week9/h-app-reloaded/src/actions/index.js"],"names":["userService","homeService","tasksService","rewardService","pointService","FETCH_HOMES","FETCH_USERS","FETCH_TASKS","FETCH_REWARDS","CREATE_HOME","FETCH_POINTS","FETCH_POINTS_LIST","SELECTED_HOME","SELECTED_USER","SELECTED_TASK","CREATE_TASK","SELECTED_REWARD","CREATE_REWARD","fetchHomes","dispatch","response","get","type","payload","data","fetchPopulatedHomes","createHome","formValues","userId","user","homeToCreate","name","form","owner","usersArr","post","fetchUsers","fetchTasks","fetchRewards","fetchPointsList","fetchPointsByUserAndHome","homeId","selectHome","home","selectUser","selectTask","task","createTask","taskToCreate","points","parseInt","description","isFinished","assignedUser","selectReward","createReward","rewardToCreate","pointsWorth","console","log"],"mappings":"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","sourcesContent":["import userService from \"../services/userService\";\nimport homeService from \"../services/homeService\";\nimport tasksService from \"../services/taskService\";\nimport rewardService from \"../services/rewardService\";\nimport pointService from \"../services/pointService\";\n\n\nimport {\n    FETCH_HOMES,\n    FETCH_USERS,\n    FETCH_TASKS,\n    FETCH_REWARDS,\n    CREATE_HOME,\n    FETCH_POINTS,\n    FETCH_POINTS_LIST,\n    SELECTED_HOME,\n    SELECTED_USER,\n    SELECTED_TASK,\n    CREATE_TASK,\n    SELECTED_REWARD,\n    CREATE_REWARD,\n} from \"./types\";\n\n\n\nexport const fetchHomes = () => async dispatch => {\n    const response = await homeService.get('/allHomes');\n\n    dispatch({type: FETCH_HOMES, payload: response.data});\n};\n\nexport const fetchPopulatedHomes = () => async dispatch => {\n    const response = await homeService.get('/populatedHomes');\n    dispatch({ type: FETCH_HOMES, payload: response.data });\n};\n\nexport const createHome = formValues => async (dispatch) => {\n    const userId = formValues.user;\n    const homeToCreate = {\n        name: formValues.form.name,\n        owner: userId,\n        usersArr: [userId]\n    }\n    const response = await homeService.post('/newHome', homeToCreate);\n    dispatch({type: CREATE_HOME, payload: response.data});\n    // history.push('/');\n};\n\nexport const fetchUsers = () => async dispatch => {\n    const response = await userService.get('/allUsers');\n\n    dispatch({ type: FETCH_USERS, payload: response.data });\n};\n\nexport const fetchTasks = () => async dispatch => {\n    const response = await tasksService.get('/allTasks');\n\n    dispatch({ type: FETCH_TASKS, payload: response.data });\n};\n\nexport const fetchRewards = () => async dispatch => {\n    const response = await rewardService.get('/allRewards');\n\n    dispatch({ type: FETCH_REWARDS, payload: response.data });\n};\n\nexport const fetchPointsList = () => async dispatch => {\n    const response = await pointService.get('/allPoints');\n\n    dispatch({ type: FETCH_POINTS_LIST, payload: response.data });\n};\n\nexport const fetchPointsByUserAndHome = (userId, homeId) => async dispatch => {\n    const response = await pointService.get(`/user/${userId}/home/${homeId}`);\n\n    dispatch({ type: FETCH_POINTS, payload: response.data });\n}\n\nexport const selectHome = (home) => {\n    return {\n        type: SELECTED_HOME,\n        payload: home\n    };\n};\n\nexport const selectUser = (user) => {\n    return {\n        type: SELECTED_USER,\n        payload: user\n    };\n};\n\nexport const selectTask = (task) => {\n    return {\n        type: SELECTED_TASK,\n        payload: task\n    };\n};\n\nexport const createTask = formValues => async (dispatch) => {\n    const userId = formValues.user;\n    const taskToCreate = {\n        name: formValues.form.name,\n        points: parseInt(formValues.form.points),\n        description: formValues.form.description,\n        isFinished: false,\n        assignedUser: userId,\n        home: formValues.home\n    }\n\n    const response = await tasksService.post('/newTask', taskToCreate);\n    dispatch({type: CREATE_TASK, payload: response.data});\n    // history.push('/');\n};\n\nexport const selectReward = (task) => {\n    return {\n        type: SELECTED_REWARD,\n        payload: task\n    };\n};\n\n\nexport const createReward = formValues => async (dispatch) => {\n    const userId = formValues.user;\n    const rewardToCreate = {\n        name: formValues.form.name,\n        pointsWorth: parseInt(formValues.form.pointsWorth),\n        description: formValues.form.description,\n        // isClaimed: false,\n        // assignedUser: [],\n        home: formValues.home\n    }\n    console.log(rewardToCreate, \"from action\");\n\n    const response = await rewardService.post('/newReward', rewardToCreate);\n    dispatch({type: CREATE_REWARD, payload: response.data});\n    // history.push('/');\n};\n"]},"metadata":{},"sourceType":"module"}