{"ast":null,"code":"var _jsxFileName = \"/home/lmedina/Documents/Ironhack/Week9/h-app-reloaded/src/components/homes/HomesListByUser.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPopulatedHomes, selectHome } from \"../../actions\";\nimport { Link } from \"react-router-dom\";\nimport { withAuth0 } from \"@auth0/auth0-react\";\nimport Loading from \"../utils/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HomesListByUser extends Component {\n  componentDidMount() {\n    this.props.fetchPopulatedHomes();\n  }\n\n  renderUserList(home) {\n    return home.usersArr.map(user => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: user.name\n      }, user._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n  doesUserBelongHome(home) {\n    let result = false;\n\n    if (this.props.auth0.isAuthenticated === true) {\n      home.usersArr.map(user => user === this.props.auth0.user.email ? result = true : null);\n    }\n\n    return result;\n  }\n\n  renderList() {\n    if (this.props.auth0.isAuthenticated !== true) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 20\n      }, this);\n    }\n\n    return this.props.homes.map(home => {\n      return this.doesUserBelongHome(home) && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/home/dashboard\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item\",\n            onClick: () => this.props.selectHome(home),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"large middle aligned icon camera\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 29\n            }, this), home.name, /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, home._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Homes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ui celled list\",\n          children: this.renderList()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center aligned\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/new\",\n            className: \"center aligned\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button \",\n              children: \"Create new Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), \"Grid A grid is used to harmonize negative space in a layout ads via Carbon Vercel automates and optimizes your development workflow so you can focus on the frontend. ads via Carbon Grid Introduction Columns Rows Varying Grids Responsive Grids Introduction Grids A grid is a structure with a long history used to align negative space in designs. Using a grid makes content appear to flow more naturally on your page. Columns Grids divide horizontal space into indivisible units called \\\"columns\\\". All columns in a grid must specify their width as proportion of the total available row width. All grid systems choose an arbitrary column count to allow per row. Semantic's default theme uses 16 columns. The example below shows four four wide columns will fit in the first row, 16 / 4 = 4, and three various sized columns in the second row. 2 + 8 + 6 = 16 The default column count, and other arbitrary features of grids can be changed by adjusting Semantic UI's underlying theming variables. Rows Rows are groups of columns which are aligned horizontally. Rows can either be explicit, marked with an additional row element, or implicit, automatically occurring when no more space is left in a previous row. After each group of columns vertical spacing is added to separate each group of columns, creating vertical rhythm. Gutters Grid columns are separated by areas of white space referred to as \\\"gutters\\\". Gutters improve legibility by providing, negative space between page elements. Gutters remain a constant size regardless of the width of the grid, or how many columns are in a row. To increase the size of gutters in a particular grid, you can use a relaxed grid variation. Negative Margins Since all grid columns include gutters, grids use negative margins to make sure that the first and last columns sit flush with content outside the grid. In the following example, you can see even though the top row has padding, the attached button still sits flush with the edge of the grid. In some cases, like when a column or row is colored, you may want to avoid using negative margins. You can do this by using a padded grid variation. Page Grids Grids are fluid and will automatically flow in size to take the maximum available width. Containers are elements designed to limit page content to a reasonable maximum width for display based on the size of the user's screen. Using a ui grid container is the best way to include top-level page content inside a grid. In version 1.x of Semantic UI page grid were used to contain the maximum width of grids holding page content. Page grid have been deprecated in favor for the simpler container element. Columns Automatic Flow Most grids do not need to specify rows. Content will automatically flow to the next row when all the grid columns are taken in the current row. Column Content Since columns use padding to create gutters, content stylings should not be applied directly to columns, but to elements inside of columns. Column Widths Column widths can be specified using (x) wide class names. If a column cannot fit in a row it will automatically flow to the next row\", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"ui grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"eight wide column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"eight wide column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"ten wide column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"six wide column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"four wide column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"twelve wide column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"two wide column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"fourteen wide column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"sixteen wide column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 1\n        }, this), \"Rows Grouping Row wrappers allow you to apply variations to a group of columns. Clearing Content Row wrappers will automatically clear previous columns, making them useful when using floated variations. Special Grids Additionally, some types of grids, like divided or celled require row wrappers to apply formatting correctly. Varying Grids Nesting Grids Grids can be placed inside of other grids, letting you sub-divide columns. Colored Grids can use named colors variations to add background colors, but only with padded grid that do not include negative margins. To include a color that is not available in the default palette its perfectly fine to use CSS Olive Black Custom Row Black Olive\", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"ui equal width center aligned padded grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"olive column\",\n              children: \"Olive\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"black column\",\n              children: \"Black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"row\",\n            style: \"background-color: #869D05;color: #FFFFFF;\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"column\",\n              children: \"Custom Row\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"black column\",\n              children: \"Black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"olive column\",\n              children: \"Olive\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 1\n        }, this), \"Automatic Column Count The equal width variation will automatically divide column width evenly. This is useful with dynamic content where you do not know the column count in advance. Centering Content If a row does not take up all sixteen grid columns, you can use a centered variation to center the column contents inside the grid.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"ui two column centered grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"column\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"four column centered row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"column\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"column\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    homes: Object.values(state.homes) // currentUserId: '',\n\n  };\n};\n\nconst authWrapped = withAuth0(HomesListByUser);\nexport default connect(mapStateToProps, {\n  fetchPopulatedHomes,\n  selectHome\n})(authWrapped);","map":{"version":3,"sources":["/home/lmedina/Documents/Ironhack/Week9/h-app-reloaded/src/components/homes/HomesListByUser.js"],"names":["React","Component","connect","fetchPopulatedHomes","selectHome","Link","withAuth0","Loading","HomesListByUser","componentDidMount","props","renderUserList","home","usersArr","map","user","name","_id","doesUserBelongHome","result","auth0","isAuthenticated","email","renderList","homes","render","mapStateToProps","state","Object","values","authWrapped"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchPopulatedHomes, selectHome } from \"../../actions\";\n\nimport { Link } from \"react-router-dom\";\nimport { withAuth0 } from \"@auth0/auth0-react\";\nimport Loading from \"../utils/Loading\";\n\n\nclass HomesListByUser extends Component {\n    componentDidMount() {\n        this.props.fetchPopulatedHomes();\n    }\n\n    renderUserList(home) {\n        return home.usersArr.map(user => {\n            return (\n                <div key={user._id}>{user.name}</div>\n            )\n        })\n    }\n\n    doesUserBelongHome(home) {\n        let result = false\n        if (this.props.auth0.isAuthenticated === true) {\n            home.usersArr.map(user => user === this.props.auth0.user.email ? result = true : null)\n        }\n        return result\n    }\n\n    renderList() {\n        if (this.props.auth0.isAuthenticated !== true) {\n            return <div><Loading /></div>\n        }\n        return this.props.homes.map(home => {\n\n            return (\n\n                this.doesUserBelongHome(home) &&\n                <div key={home._id}>\n                    <Link to=\"/home/dashboard\">\n                        <div className=\"item\" onClick={() => this.props.selectHome(home)}>\n                            <i className=\"large middle aligned icon camera\" />\n                            {home.name}\n                            <div className=\"content\">\n\n                            </div>\n                        </div>\n                    </Link>\n                </div>\n\n\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h2>Homes</h2>\n                    <div className=\"ui celled list\">{this.renderList()}</div>\n                    <div className=\"center aligned\">\n                        <Link to=\"/new\" className=\"center aligned\">\n                            <button className=\"button \">Create new Home</button>\n                        </Link>\n                    </div>\n                    Grid\nA grid is used to harmonize negative space in a layout\nads via Carbon\nVercel automates and optimizes your development workflow so you can focus on the frontend.\nads via Carbon\nGrid\nIntroduction\nColumns\nRows\nVarying Grids\nResponsive Grids\nIntroduction\nGrids\nA grid is a structure with a long history used to align negative space in designs.\n\nUsing a grid makes content appear to flow more naturally on your page.\n\n\nColumns\nGrids divide horizontal space into indivisible units called \"columns\". All columns in a grid must specify their width as proportion of the total available row width.\n\nAll grid systems choose an arbitrary column count to allow per row. Semantic's default theme uses 16 columns.\n\nThe example below shows four four wide columns will fit in the first row, 16 / 4 = 4, and three various sized columns in the second row. 2 + 8 + 6 = 16\n\nThe default column count, and other arbitrary features of grids can be changed by adjusting Semantic UI's underlying theming variables.\n\nRows\nRows are groups of columns which are aligned horizontally.\n\nRows can either be explicit, marked with an additional row element, or implicit, automatically occurring when no more space is left in a previous row.\n\nAfter each group of columns vertical spacing is added to separate each group of columns, creating vertical rhythm.\n\nGutters\nGrid columns are separated by areas of white space referred to as \"gutters\". Gutters improve legibility by providing, negative space between page elements.\n\nGutters remain a constant size regardless of the width of the grid, or how many columns are in a row. To increase the size of gutters in a particular grid, you can use a relaxed grid variation.\n\nNegative Margins\nSince all grid columns include gutters, grids use negative margins to make sure that the first and last columns sit flush with content outside the grid.\n\nIn the following example, you can see even though the top row has padding, the attached button still sits flush with the edge of the grid.\n\nIn some cases, like when a column or row is colored, you may want to avoid using negative margins. You can do this by using a padded grid variation.\n\nPage Grids\nGrids are fluid and will automatically flow in size to take the maximum available width.\n\nContainers are elements designed to limit page content to a reasonable maximum width for display based on the size of the user's screen.\n\nUsing a ui grid container is the best way to include top-level page content inside a grid.\n\nIn version 1.x of Semantic UI page grid were used to contain the maximum width of grids holding page content. Page grid have been deprecated in favor for the simpler container element.\n\nColumns\nAutomatic Flow\nMost grids do not need to specify rows. Content will automatically flow to the next row when all the grid columns are taken in the current row.\n\nColumn Content\nSince columns use padding to create gutters, content stylings should not be applied directly to columns, but to elements inside of columns.\n\n\n\n\nColumn Widths\nColumn widths can be specified using (x) wide class names. If a column cannot fit in a row it will automatically flow to the next row\n\n<div class=\"ui grid\">\n  <div class=\"eight wide column\"></div>\n  <div class=\"eight wide column\"></div>\n  <div class=\"ten wide column\"></div>\n  <div class=\"six wide column\"></div>\n  <div class=\"four wide column\"></div>\n  <div class=\"twelve wide column\"></div>\n  <div class=\"two wide column\"></div>\n  <div class=\"fourteen wide column\"></div>\n  <div class=\"sixteen wide column\"></div>\n</div>\nRows\nGrouping\nRow wrappers allow you to apply variations to a group of columns.\n\nClearing Content\nRow wrappers will automatically clear previous columns, making them useful when using floated variations.\n\nSpecial Grids\nAdditionally, some types of grids, like divided or celled require row wrappers to apply formatting correctly.\n\n\n\n\n\n\n\nVarying Grids\nNesting Grids\nGrids can be placed inside of other grids, letting you sub-divide columns.\n\nColored\nGrids can use named colors variations to add background colors, but only with padded grid that do not include negative margins.\n\nTo include a color that is not available in the default palette its perfectly fine to use CSS\n\nOlive\nBlack\nCustom Row\nBlack\nOlive\n<div class=\"ui equal width center aligned padded grid\">\n  <div class=\"row\">\n    <div class=\"olive column\">\n      Olive\n    </div>\n    <div class=\"black column\">\n      Black\n    </div>\n  </div>\n  <div class=\"row\" style=\"background-color: #869D05;color: #FFFFFF;\">\n    <div class=\"column\">Custom Row</div>\n  </div>\n  <div class=\"row\">\n    <div class=\"black column\">\n      Black\n    </div>\n    <div class=\"olive column\">\n      Olive\n    </div>\n  </div>\n</div>\nAutomatic Column Count\nThe equal width variation will automatically divide column width evenly. This is useful with dynamic content where you do not know the column count in advance.\n\nCentering Content\nIf a row does not take up all sixteen grid columns, you can use a centered variation to center the column contents inside the grid.\n\n \n<div class=\"ui two column centered grid\">\n  <div class=\"column\"></div>\n  <div class=\"four column centered row\">\n    <div class=\"column\"></div>\n    <div class=\"column\"></div>\n  </div>\n</div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        homes: Object.values(state.homes),\n        // currentUserId: '',\n\n    };\n};\n\nconst authWrapped = withAuth0(HomesListByUser)\n\nexport default connect(\n    mapStateToProps,\n    { fetchPopulatedHomes, selectHome }\n)(authWrapped);\n"]},"metadata":{},"sourceType":"module"}