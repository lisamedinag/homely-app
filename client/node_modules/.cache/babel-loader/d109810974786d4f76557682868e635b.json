{"ast":null,"code":"var _jsxFileName = \"/home/lmedina/Documents/Ironhack/Week9/h-app-reloaded/src/components/tasks/AutoAssignOrCompleteTaskButton.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loading from \"../utils/Loading\";\nimport { connect } from \"react-redux\";\nimport { updateStatusAndUserAssignedTask, fetchTasks, selectTask } from \"../../actions\";\nimport { withAuth0 } from \"@auth0/auth0-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AutoAssignOrCompleteTaskButton extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.updateTask = (taskId, desiredStatus, userId) => {\n      this.props.updateStatusAndUserAssignedTask(taskId, desiredStatus, userId);\n    };\n  }\n\n  render() {\n    const userId = this.props.auth0.user.email;\n    const selectedTask = this.props.selectedTask;\n\n    if (selectedTask === null || selectedTask === undefined) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (selectedTask.status === \"AVAILABLE\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"you can assign the task to yourself\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.updateTask(selectedTask._id, \"ASSIGNED\", userId),\n          children: \"I will do it!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this);\n    } else if (selectedTask.status === \"ASSIGNED\" && selectedTask.assignedUser === userId) {\n      //TODO FUNCTION TO GET THE POINT FROM A COMPLETED TASK\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"you can set the task as completed and obtain the points\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.updateTask(selectedTask._id, \"COMPLETED\", userId),\n            children: \"Complete the task!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"you can set the task as completed and obtain the points\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.updateTask(selectedTask._id, \"AVAILABLE\", userId),\n            children: \"I can't do it\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedTask: state.selectedTask\n  };\n};\n\nconst authWrapped = withAuth0(AutoAssignOrCompleteTaskButton);\nexport default connect(mapStateToProps, {\n  updateStatusAndUserAssignedTask: updateStatusAndUserAssignedTask\n})(authWrapped);","map":{"version":3,"sources":["/home/lmedina/Documents/Ironhack/Week9/h-app-reloaded/src/components/tasks/AutoAssignOrCompleteTaskButton.js"],"names":["React","Component","Link","Loading","connect","updateStatusAndUserAssignedTask","fetchTasks","selectTask","withAuth0","AutoAssignOrCompleteTaskButton","updateTask","taskId","desiredStatus","userId","props","render","auth0","user","email","selectedTask","undefined","status","_id","assignedUser","mapStateToProps","state","authWrapped"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,+BAAR,EAAyCC,UAAzC,EAAqDC,UAArD,QAAsE,eAAtE;AACA,SAAQC,SAAR,QAAwB,oBAAxB;;;AAEA,MAAMC,8BAAN,SAA6CR,SAA7C,CAAuD;AAAA;AAAA;;AAAA,SAEnDS,UAFmD,GAEtC,CAACC,MAAD,EAASC,aAAT,EAAwBC,MAAxB,KAAmC;AAC5C,WAAKC,KAAL,CAAWT,+BAAX,CAA2CM,MAA3C,EAAmDC,aAAnD,EAAkEC,MAAlE;AACH,KAJkD;AAAA;;AAOnDE,EAAAA,MAAM,GAAG;AACL,UAAMF,MAAM,GAAG,KAAKC,KAAL,CAAWE,KAAX,CAAiBC,IAAjB,CAAsBC,KAArC;AACA,UAAMC,YAAY,GAAG,KAAKL,KAAL,CAAWK,YAAhC;;AACA,QAAIA,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAKC,SAA9C,EAAyD;AACrD,0BAAO;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,QAAID,YAAY,CAACE,MAAb,KAAwB,WAA5B,EAAyC;AACrC,0BACI;AAAA,uEAEI;AACI,UAAA,OAAO,EAAE,MAAM,KAAKX,UAAL,CAAgBS,YAAY,CAACG,GAA7B,EAAkC,UAAlC,EAA8CT,MAA9C,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AASH,KAVD,MAUO,IAAIM,YAAY,CAACE,MAAb,KAAwB,UAAxB,IAAsCF,YAAY,CAACI,YAAb,KAA8BV,MAAxE,EAAgF;AACnF;AACA,0BACI;AAAA,gCACI;AAAA,6FAEI;AACI,YAAA,OAAO,EAAE,MAAM,KAAKH,UAAL,CAAgBS,YAAY,CAACG,GAA7B,EAAkC,WAAlC,EAA+CT,MAA/C,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI;AAAA;AAAA;AAAA;AAAA,gBARJ,eASI;AAAA,6FAEI;AACI,YAAA,OAAO,EAAE,MAAM,KAAKH,UAAL,CAAgBS,YAAY,CAACG,GAA7B,EAAkC,WAAlC,EAA+CT,MAA/C,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAkBH;;AACD,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AA9CkD;;AAiDvD,MAAMW,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AAACN,IAAAA,YAAY,EAAEM,KAAK,CAACN;AAArB,GAAP;AAEH,CAHD;;AAIA,MAAMO,WAAW,GAAGlB,SAAS,CAACC,8BAAD,CAA7B;AAEA,eAAeL,OAAO,CAClBoB,eADkB,EACD;AAACnB,EAAAA,+BAA+B,EAAEA;AAAlC,CADC,CAAP,CAEbqB,WAFa,CAAf","sourcesContent":["import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Loading from \"../utils/Loading\";\nimport {connect} from \"react-redux\";\nimport {updateStatusAndUserAssignedTask, fetchTasks, selectTask} from \"../../actions\";\nimport {withAuth0} from \"@auth0/auth0-react\";\n\nclass AutoAssignOrCompleteTaskButton extends Component {\n\n    updateTask = (taskId, desiredStatus, userId) => {\n        this.props.updateStatusAndUserAssignedTask(taskId, desiredStatus, userId)\n    }\n\n\n    render() {\n        const userId = this.props.auth0.user.email;\n        const selectedTask = this.props.selectedTask;\n        if (selectedTask === null || selectedTask === undefined) {\n            return <div/>\n        }\n\n        if (selectedTask.status === \"AVAILABLE\") {\n            return (\n                <div>\n                    you can assign the task to yourself\n                    <button\n                        onClick={() => this.updateTask(selectedTask._id, \"ASSIGNED\", userId)}>\n                        I will do it!\n                    </button>\n                </div>\n            )\n        } else if (selectedTask.status === \"ASSIGNED\" && selectedTask.assignedUser === userId) {\n            //TODO FUNCTION TO GET THE POINT FROM A COMPLETED TASK\n            return (\n                <div>\n                    <div>\n                        you can set the task as completed and obtain the points\n                        <button\n                            onClick={() => this.updateTask(selectedTask._id, \"COMPLETED\", userId)}>\n                            Complete the task!\n                        </button>\n                    </div>\n                    <br/>\n                    <div>\n                        you can set the task as completed and obtain the points\n                        <button\n                            onClick={() => this.updateTask(selectedTask._id, \"AVAILABLE\", userId)}>\n                            I can't do it\n                        </button>\n                    </div>\n                </div>)\n        }\n        return <div/>\n    }\n}\n\nconst mapStateToProps = state => {\n    return {selectedTask: state.selectedTask};\n\n};\nconst authWrapped = withAuth0(AutoAssignOrCompleteTaskButton);\n\nexport default connect(\n    mapStateToProps, {updateStatusAndUserAssignedTask: updateStatusAndUserAssignedTask}\n)(authWrapped);"]},"metadata":{},"sourceType":"module"}