{"ast":null,"code":"import userService from \"../services/userService\";\nimport homeService from \"../services/homeService\";\nimport tasksService from \"../services/taskService\";\nimport rewardService from \"../services/rewardService\";\nimport pointService from \"../services/pointService\";\nimport history from \"../history\";\nimport { FETCH_HOMES, FETCH_USERS, FETCH_TASKS, FETCH_REWARDS, CREATE_HOME, FETCH_POINTS, FETCH_POINTS_LIST, SELECTED_HOME, SELECTED_USER, SELECTED_TASK, CREATE_TASK, SELECTED_REWARD, CREATE_REWARD, ASSIGN_TASK } from \"./types\";\nexport const fetchHomes = () => async dispatch => {\n  const response = await homeService.get('/allHomes');\n  dispatch({\n    type: FETCH_HOMES,\n    payload: response.data\n  });\n};\nexport const fetchPopulatedHomes = () => async dispatch => {\n  const response = await homeService.get('/populatedHomes');\n  dispatch({\n    type: FETCH_HOMES,\n    payload: response.data\n  });\n};\nexport const createHome = formValues => async dispatch => {\n  const userId = formValues.user;\n  const homeToCreate = {\n    name: formValues.form.name,\n    owner: userId,\n    usersArr: [userId]\n  };\n  const response = await homeService.post('/newHome', homeToCreate);\n  dispatch({\n    type: CREATE_HOME,\n    payload: response.data\n  }); // history.push('/');\n};\nexport const fetchUsers = () => async dispatch => {\n  const response = await userService.get('/allUsers');\n  dispatch({\n    type: FETCH_USERS,\n    payload: response.data\n  });\n};\nexport const fetchTasks = () => async dispatch => {\n  const response = await tasksService.get('/allTasks');\n  dispatch({\n    type: FETCH_TASKS,\n    payload: response.data\n  });\n};\nexport const fetchRewards = () => async dispatch => {\n  const response = await rewardService.get('/allRewards');\n  dispatch({\n    type: FETCH_REWARDS,\n    payload: response.data\n  });\n};\nexport const fetchPointsList = () => async dispatch => {\n  const response = await pointService.get('/allPoints');\n  dispatch({\n    type: FETCH_POINTS_LIST,\n    payload: response.data\n  });\n};\nexport const fetchPointsByUserAndHome = (userId, homeId) => async dispatch => {\n  const response = await pointService.get(`/user/${userId}/home/${homeId}`);\n  dispatch({\n    type: FETCH_POINTS,\n    payload: response.data\n  });\n};\nexport const selectHome = home => {\n  return {\n    type: SELECTED_HOME,\n    payload: home\n  };\n};\nexport const selectUser = user => {\n  return {\n    type: SELECTED_USER,\n    payload: user\n  };\n};\nexport const selectTask = task => {\n  return {\n    type: SELECTED_TASK,\n    payload: task\n  };\n};\nexport const createTask = formValues => async dispatch => {\n  const userId = formValues.user;\n  const status = formValues.form.assignedUser !== '' ? 'ASSIGNED' : 'AVAILABLE';\n  const taskToCreate = {\n    name: formValues.form.name,\n    points: parseInt(formValues.form.points),\n    description: formValues.form.description,\n    status: status,\n    assignedUser: formValues.form.assignedUser,\n    home: formValues.home\n  };\n  const response = await tasksService.post('/newTask', taskToCreate);\n  dispatch({\n    type: CREATE_TASK,\n    payload: response.data\n  });\n  history.goBack();\n};\nexport const updateStatusAndUserAssignedTask = (taskId, status, userId) => async dispatch => {\n  const taskToAssign = {\n    status: status,\n    assignedUser: userId\n  };\n  console.log(taskToAssign);\n  const response = await tasksService.put('/editTask/' + taskId, taskToAssign);\n  dispatch({\n    type: ASSIGN_TASK,\n    payload: response.data\n  });\n  history.goBack();\n};\nexport const selectReward = task => {\n  return {\n    type: SELECTED_REWARD,\n    payload: task\n  };\n};\nexport const createReward = formValues => async dispatch => {\n  const userId = formValues.user;\n  const rewardToCreate = {\n    name: formValues.form.name,\n    pointsWorth: parseInt(formValues.form.pointsWorth),\n    description: formValues.form.description,\n    status: 'AVAILABLE',\n    claimedByUser: '',\n    home: formValues.home\n  };\n  console.log(rewardToCreate, \"from action\");\n  const response = await rewardService.post('/newReward', rewardToCreate);\n  dispatch({\n    type: CREATE_REWARD,\n    payload: response.data\n  });\n  history.goBack();\n};\nexport const updateStatusAndUserAssignedReward = (rewardId, status, userId) => async dispatch => {\n  const rewardToAssign = {\n    status: status,\n    claimedByUser: userId\n  };\n  console.log(rewardToAssign);\n  const response = await rewardService.put('/editReward/' + rewardId, rewardToAssign);\n  dispatch({\n    type: ASSIGN_TASK,\n    payload: response.data\n  });\n  history.goBack();\n};","map":{"version":3,"sources":["/home/lmedina/Documents/Ironhack/Week9/h-app-reloaded/src/actions/index.js"],"names":["userService","homeService","tasksService","rewardService","pointService","history","FETCH_HOMES","FETCH_USERS","FETCH_TASKS","FETCH_REWARDS","CREATE_HOME","FETCH_POINTS","FETCH_POINTS_LIST","SELECTED_HOME","SELECTED_USER","SELECTED_TASK","CREATE_TASK","SELECTED_REWARD","CREATE_REWARD","ASSIGN_TASK","fetchHomes","dispatch","response","get","type","payload","data","fetchPopulatedHomes","createHome","formValues","userId","user","homeToCreate","name","form","owner","usersArr","post","fetchUsers","fetchTasks","fetchRewards","fetchPointsList","fetchPointsByUserAndHome","homeId","selectHome","home","selectUser","selectTask","task","createTask","status","assignedUser","taskToCreate","points","parseInt","description","goBack","updateStatusAndUserAssignedTask","taskId","taskToAssign","console","log","put","selectReward","createReward","rewardToCreate","pointsWorth","claimedByUser","updateStatusAndUserAssignedReward","rewardId","rewardToAssign"],"mappings":"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","sourcesContent":["import userService from \"../services/userService\";\nimport homeService from \"../services/homeService\";\nimport tasksService from \"../services/taskService\";\nimport rewardService from \"../services/rewardService\";\nimport pointService from \"../services/pointService\";\nimport history from \"../history\";\n\nimport {\n    FETCH_HOMES,\n    FETCH_USERS,\n    FETCH_TASKS,\n    FETCH_REWARDS,\n    CREATE_HOME,\n    FETCH_POINTS,\n    FETCH_POINTS_LIST,\n    SELECTED_HOME,\n    SELECTED_USER,\n    SELECTED_TASK,\n    CREATE_TASK,\n    SELECTED_REWARD,\n    CREATE_REWARD, ASSIGN_TASK,\n} from \"./types\";\n\n\n\nexport const fetchHomes = () => async dispatch => {\n    const response = await homeService.get('/allHomes');\n\n    dispatch({type: FETCH_HOMES, payload: response.data});\n};\n\nexport const fetchPopulatedHomes = () => async dispatch => {\n    const response = await homeService.get('/populatedHomes');\n    dispatch({ type: FETCH_HOMES, payload: response.data });\n};\n\nexport const createHome = formValues => async (dispatch) => {\n    const userId = formValues.user;\n    const homeToCreate = {\n        name: formValues.form.name,\n        owner: userId,\n        usersArr: [userId]\n    }\n    const response = await homeService.post('/newHome', homeToCreate);\n    dispatch({type: CREATE_HOME, payload: response.data});\n    // history.push('/');\n};\n\nexport const fetchUsers = () => async dispatch => {\n    const response = await userService.get('/allUsers');\n\n    dispatch({ type: FETCH_USERS, payload: response.data });\n};\n\nexport const fetchTasks = () => async dispatch => {\n    const response = await tasksService.get('/allTasks');\n\n    dispatch({ type: FETCH_TASKS, payload: response.data });\n};\n\nexport const fetchRewards = () => async dispatch => {\n    const response = await rewardService.get('/allRewards');\n\n    dispatch({ type: FETCH_REWARDS, payload: response.data });\n};\n\nexport const fetchPointsList = () => async dispatch => {\n    const response = await pointService.get('/allPoints');\n\n    dispatch({ type: FETCH_POINTS_LIST, payload: response.data });\n};\n\nexport const fetchPointsByUserAndHome = (userId, homeId) => async dispatch => {\n    const response = await pointService.get(`/user/${userId}/home/${homeId}`);\n\n    dispatch({ type: FETCH_POINTS, payload: response.data });\n}\n\nexport const selectHome = (home) => {\n    return {\n        type: SELECTED_HOME,\n        payload: home\n    };\n};\n\nexport const selectUser = (user) => {\n    return {\n        type: SELECTED_USER,\n        payload: user\n    };\n};\n\nexport const selectTask = (task) => {\n    return {\n        type: SELECTED_TASK,\n        payload: task\n    };\n};\n\nexport const createTask = formValues => async (dispatch) => {\n\n    const userId = formValues.user;\n    const status = formValues.form.assignedUser !== '' ? 'ASSIGNED' : 'AVAILABLE';\n    const taskToCreate = {\n        name: formValues.form.name,\n        points: parseInt(formValues.form.points),\n        description: formValues.form.description,\n        status: status,\n        assignedUser: formValues.form.assignedUser,\n        home: formValues.home\n    }\n\n    const response = await tasksService.post('/newTask', taskToCreate);\n    dispatch({type: CREATE_TASK, payload: response.data});\n    history.goBack();\n};\n\nexport const updateStatusAndUserAssignedTask = (taskId, status, userId,) => async (dispatch) => {\n\n\n    const taskToAssign = {\n        status: status,\n        assignedUser: userId,\n    }\n    console.log(taskToAssign)\n\n    const response = await tasksService.put('/editTask/' + taskId, taskToAssign);\n    dispatch({type: ASSIGN_TASK, payload: response.data});\n    history.goBack();\n};\n\n\n\n\n\nexport const selectReward = (task) => {\n    return {\n        type: SELECTED_REWARD,\n        payload: task\n    };\n};\n\n\nexport const createReward = formValues => async (dispatch) => {\n    const userId = formValues.user;\n    const rewardToCreate = {\n        name: formValues.form.name,\n        pointsWorth: parseInt(formValues.form.pointsWorth),\n        description: formValues.form.description,\n        status: 'AVAILABLE',\n        claimedByUser: '',\n        home: formValues.home\n    }\n    console.log(rewardToCreate, \"from action\");\n\n    const response = await rewardService.post('/newReward', rewardToCreate);\n    dispatch({type: CREATE_REWARD, payload: response.data});\n    history.goBack();\n};\n\nexport const updateStatusAndUserAssignedReward = (rewardId, status, userId,) => async (dispatch) => {\n\n\n    const rewardToAssign = {\n        status: status,\n        claimedByUser: userId,\n    }\n    console.log(rewardToAssign)\n\n    const response = await rewardService.put('/editReward/' + rewardId, rewardToAssign);\n    dispatch({type: ASSIGN_TASK, payload: response.data});\n    history.goBack();\n};\n"]},"metadata":{},"sourceType":"module"}