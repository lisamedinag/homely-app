{"ast":null,"code":"var _jsxFileName = \"/home/lmedina/Documents/Ironhack/Week9/h-app-reloaded/src/components/rewards/AutoAssignOrCompleteRewardButton.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loading from \"../utils/Loading\";\nimport { connect } from \"react-redux\";\nimport { updateStatusAndUserAssignedReward } from \"../../actions\";\nimport { withAuth0 } from \"@auth0/auth0-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AutoAssignOrCompleteRewardButton extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.updateReward = (rewardId, desiredStatus, userId) => {\n      this.props.updateStatusAndUserAssignedReward(rewardId, desiredStatus, userId);\n    };\n  }\n\n  render() {\n    console.log(this.props.selectedReward);\n    const userId = this.props.auth0.user.email;\n    const selectedReward = this.props.selectedReward;\n\n    if (selectedReward === null || selectedReward === undefined) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (selectedReward.status === \"AVAILABLE\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"you can claim this reward for yourself\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.updateReward(selectedReward._id, \"CLAIMED\", userId),\n          children: \"I'd like this reward\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this);\n    } else if (selectedReward.status === \"CLAIMED\" && selectedReward.assignedUser === userId) {\n      //TODO FUNCTION TO SPEND POINTS TO GET THE REWARD\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Have you enjoyed your Reward\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.updateReward(selectedReward._id, \"COMPLETED\", userId),\n            children: \"Yes!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Do you want to renounce your reward? (you will have half your points back)\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.updateReward(selectedReward._id, \"AVAILABLE\", userId),\n            children: \"Ok, I renounce it\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedReward: state.selectedReward\n  };\n};\n\nconst authWrapped = withAuth0(AutoAssignOrCompleteRewardButton);\nexport default connect(mapStateToProps, {\n  updateStatusAndUserAssignedReward: updateStatusAndUserAssignedReward\n})(authWrapped);","map":{"version":3,"sources":["/home/lmedina/Documents/Ironhack/Week9/h-app-reloaded/src/components/rewards/AutoAssignOrCompleteRewardButton.js"],"names":["React","Component","Link","Loading","connect","updateStatusAndUserAssignedReward","withAuth0","AutoAssignOrCompleteRewardButton","updateReward","rewardId","desiredStatus","userId","props","render","console","log","selectedReward","auth0","user","email","undefined","status","_id","assignedUser","mapStateToProps","state","authWrapped"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAEIC,iCAFJ,QAGO,eAHP;AAIA,SAAQC,SAAR,QAAwB,oBAAxB;;;AAEA,MAAMC,gCAAN,SAA+CN,SAA/C,CAAyD;AAAA;AAAA;;AAAA,SAErDO,YAFqD,GAEtC,CAACC,QAAD,EAAWC,aAAX,EAA0BC,MAA1B,KAAqC;AAChD,WAAKC,KAAL,CAAWP,iCAAX,CAA6CI,QAA7C,EAAuDC,aAAvD,EAAsEC,MAAtE;AACH,KAJoD;AAAA;;AAOrDE,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWI,cAAvB;AACA,UAAML,MAAM,GAAG,KAAKC,KAAL,CAAWK,KAAX,CAAiBC,IAAjB,CAAsBC,KAArC;AACA,UAAMH,cAAc,GAAG,KAAKJ,KAAL,CAAWI,cAAlC;;AACA,QAAIA,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAKI,SAAlD,EAA6D;AACzD,0BAAO;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,QAAIJ,cAAc,CAACK,MAAf,KAA0B,WAA9B,EAA2C;AACvC,0BACI;AAAA,0EAEI;AACI,UAAA,OAAO,EAAE,MAAM,KAAKb,YAAL,CAAkBQ,cAAc,CAACM,GAAjC,EAAsC,SAAtC,EAAiDX,MAAjD,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AASH,KAVD,MAUO,IAAIK,cAAc,CAACK,MAAf,KAA0B,SAA1B,IAAuCL,cAAc,CAACO,YAAf,KAAgCZ,MAA3E,EAAmF;AACtF;AACA,0BACI;AAAA,gCACI;AAAA,kEAEI;AACI,YAAA,OAAO,EAAE,MAAM,KAAKH,YAAL,CAAkBQ,cAAc,CAACM,GAAjC,EAAsC,WAAtC,EAAmDX,MAAnD,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI;AAAA;AAAA;AAAA;AAAA,gBARJ,eASI;AAAA,gHAEI;AACI,YAAA,OAAO,EAAE,MAAM,KAAKH,YAAL,CAAkBQ,cAAc,CAACM,GAAjC,EAAsC,WAAtC,EAAmDX,MAAnD,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAkBH;;AACD,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AA/CoD;;AAkDzD,MAAMa,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AAACT,IAAAA,cAAc,EAAES,KAAK,CAACT;AAAvB,GAAP;AAEH,CAHD;;AAIA,MAAMU,WAAW,GAAGpB,SAAS,CAACC,gCAAD,CAA7B;AAEA,eAAeH,OAAO,CAClBoB,eADkB,EACD;AAACnB,EAAAA,iCAAiC,EAAEA;AAApC,CADC,CAAP,CAEbqB,WAFa,CAAf","sourcesContent":["import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Loading from \"../utils/Loading\";\nimport {connect} from \"react-redux\";\nimport {\n\n    updateStatusAndUserAssignedReward\n} from \"../../actions\";\nimport {withAuth0} from \"@auth0/auth0-react\";\n\nclass AutoAssignOrCompleteRewardButton extends Component {\n\n    updateReward = (rewardId, desiredStatus, userId) => {\n        this.props.updateStatusAndUserAssignedReward(rewardId, desiredStatus, userId)\n    }\n\n\n    render() {\n        console.log(this.props.selectedReward)\n        const userId = this.props.auth0.user.email;\n        const selectedReward = this.props.selectedReward;\n        if (selectedReward === null || selectedReward === undefined) {\n            return <div/>\n        }\n\n        if (selectedReward.status === \"AVAILABLE\") {\n            return (\n                <div>\n                    you can claim this reward for yourself\n                    <button\n                        onClick={() => this.updateReward(selectedReward._id, \"CLAIMED\", userId)}>\n                        I'd like this reward\n                    </button>\n                </div>\n            )\n        } else if (selectedReward.status === \"CLAIMED\" && selectedReward.assignedUser === userId) {\n            //TODO FUNCTION TO SPEND POINTS TO GET THE REWARD\n            return (\n                <div>\n                    <div>\n                        Have you enjoyed your Reward\n                        <button\n                            onClick={() => this.updateReward(selectedReward._id, \"COMPLETED\", userId)}>\n                            Yes!\n                        </button>\n                    </div>\n                    <br/>\n                    <div>\n                        Do you want to renounce your reward? (you will have half your points back)\n                        <button\n                            onClick={() => this.updateReward(selectedReward._id, \"AVAILABLE\", userId)}>\n                            Ok, I renounce it\n                        </button>\n                    </div>\n                </div>)\n        }\n        return <div/>\n    }\n}\n\nconst mapStateToProps = state => {\n    return {selectedReward: state.selectedReward};\n\n};\nconst authWrapped = withAuth0(AutoAssignOrCompleteRewardButton);\n\nexport default connect(\n    mapStateToProps, {updateStatusAndUserAssignedReward: updateStatusAndUserAssignedReward}\n)(authWrapped);"]},"metadata":{},"sourceType":"module"}